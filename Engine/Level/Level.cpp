#include "Level.h"
#include "Actor/Actor.h"
#include "Core/Engine.h"
//#include <iostream>

Level::Level()
{

}
Level::~Level()
{
	// null ??? ?? ???? ????
	for (Actor* actor : actors)
	{
		SafeDelete(actor);
	}

	for (Actor* actor : addRequestedActors)
	{
		SafeDelete(actor);
	}

	for (Actor* actor : destroyRequestedActors)
	{
		SafeDelete(actor);
	}

	// std::vector ????
	actors.clear();
	addRequestedActors.clear();
	destroyRequestedActors.clear();
}

// ?????? ????? ????? ?? ???
void Level::AddActor(Actor* newActor)
{
	// ???????(??? ???? ???) ???

	// push_back / emplace_back : ?עק ?? ??? ???¥ן? ??? ?????? ???

	// ??? ?עק?? ???
	addRequestedActors.emplace_back(newActor);
}

void Level::DestroyActor(Actor* destroyedActor)
{
	// ??? ???
	if (destroyRequestedActors.size() > 0)
	{
		for (const Actor* const actor : destroyRequestedActors)
		{
			if (actor == destroyedActor)
			{
				return;
			}
		}
	}
	// ??? ?עק?? ???
	destroyRequestedActors.emplace_back(destroyedActor);
}

// ???? ???

// ??? ???????(Lifetime)?? 1???? ???? (???? ????)
void Level::OnInit()
{
	for (Actor* const actor : actors)
	{
		if (actor == nullptr)
		{
			continue; // nullptr ??
		}
		// ???? ??? ???? ???
		if (!actor->isActive || actor->isExpired)
		{
			continue;
		}

		// ??? ???? ????? ?????
		if (actor->HasBegunPlay())
		{
			continue;
		}

		actor->OnInit();
	}
}

// ?????? ???? ??? (????? ??? / ??????? ????? ???)
void Level::OnUpdate()
{
	for (Actor* const actor : actors)
	{
		if (actor == nullptr)
		{
			continue; // nullptr ??
		}
		// ???? ??? ???? ???
		if (!actor->isActive || actor->isExpired)
		{
			continue;
		}

		actor->OnRender();
	}
}

// ????? ???
void Level::OnRender()
{
	// Render Pass
	for (Actor* const actor : actors)
	{
		// ???? ??? ???? ???
		if (!actor->isActive || actor->isExpired)
		{
			continue;
		}

		// ??¥ן? ??
		actor->OnRender();
	}
}

void Level::ProcessAddAndDestroyActors()
{
	// actors ?עק???? ???? ???
	for (auto iterator = actors.begin(); iterator != actors.end();)
	{
		// ???? ????? ???????? ??? ?? ?עק???? ????
		if ((*iterator)->isExpired)
		{
			// erase ????? ?????? iterator?? ??????? ??????
			// ?????? ???? ?????????/
			iterator = actors.erase(iterator);
			continue;
		}

		++iterator;
	}

	// destroyedActors ?עק?? ?????? ???? delete
	for (auto*& actor : destroyRequestedActors)
	{
		// ????? ????
		SafeDelete(actor);
	}

	// ?עק ????
	destroyRequestedActors.clear();

	// addRequestedActors ?עק?? ?????? ???¥ן? ???? add
	for (auto* const actor : addRequestedActors)
	{
		actors.emplace_back(actor);
		actor->SetOwner(this);
	}

	addRequestedActors.clear();
}